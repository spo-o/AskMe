"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodeInterpreter = void 0;
const tslib_1 = require("../../internal/tslib.js");
const resource_1 = require("../../core/resource.js");
const SessionsAPI = tslib_1.__importStar(require("./sessions.js"));
const sessions_1 = require("./sessions.js");
class CodeInterpreter extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.sessions = new SessionsAPI.Sessions(this._client);
    }
    /**
     * Executes the given code snippet and returns the output. Without a session_id, a
     * new session will be created to run the code. If you do pass in a valid
     * session_id, the code will be run in that session. This is useful for running
     * multiple code snippets in the same environment, because dependencies and similar
     * things are persisted between calls to the same session.
     *
     * @example
     * ```ts
     * const executeResponse =
     *   await client.codeInterpreter.execute({
     *     code: "print('Hello, world!')",
     *     language: 'python',
     *   });
     * ```
     */
    execute(body, options) {
        return this._client.post('/tci/execute', { body, ...options });
    }
}
exports.CodeInterpreter = CodeInterpreter;
CodeInterpreter.Sessions = sessions_1.Sessions;
//# sourceMappingURL=code-interpreter.js.map