import type { RequestInit, RequestInfo } from "./internal/builtin-types.mjs";
import type { PromiseOrValue, MergedRequestInit, FinalizedRequestInit } from "./internal/types.mjs";
export type { Logger, LogLevel } from "./internal/utils/log.mjs";
import * as Opts from "./internal/request-options.mjs";
import * as Errors from "./core/error.mjs";
import * as Uploads from "./core/uploads.mjs";
import * as API from "./resources/index.mjs";
import * as TopLevelAPI from "./resources/top-level.mjs";
import { RerankParams, RerankResponse } from "./resources/top-level.mjs";
import { APIPromise } from "./core/api-promise.mjs";
import { BatchCreateParams, BatchCreateResponse, BatchListResponse, BatchRetrieveResponse, Batches } from "./resources/batches.mjs";
import { Completion, CompletionChunk, CompletionCreateParams, CompletionCreateParamsNonStreaming, CompletionCreateParamsStreaming, Completions, LogProbs, ToolChoice, Tools } from "./resources/completions.mjs";
import { Embedding, EmbeddingCreateParams, Embeddings } from "./resources/embeddings.mjs";
import { Autoscaling, EndpointCreateParams, EndpointCreateResponse, EndpointListParams, EndpointListResponse, EndpointRetrieveResponse, EndpointUpdateParams, EndpointUpdateResponse, Endpoints } from "./resources/endpoints.mjs";
import { FileDeleteResponse, FileListResponse, FileObject, FilePurpose, FileRetrieveResponse, FileType, FileUploadParams, FileUploadResponse, Files } from "./resources/files.mjs";
import { CosineLrSchedulerArgs, FineTune, FineTuneCancelResponse, FineTuneCreateParams, FineTuneCreateResponse, FineTuneDownloadParams, FineTuneDownloadResponse, FineTuneEvent, FineTuneListEventsResponse, FineTuneListResponse, FineTuneResource, FineTuneRetrieveCheckpointsResponse, FullTrainingType, LinearLrSchedulerArgs, LoRaTrainingType, LrScheduler, TrainingMethodDpo, TrainingMethodSft } from "./resources/fine-tune.mjs";
import { Hardware, HardwareListParams, HardwareListResponse } from "./resources/hardware.mjs";
import { ImageCreateParams, ImageDataB64, ImageDataURL, ImageFile, Images } from "./resources/images.mjs";
import { JobListResponse, JobRetrieveResponse, Jobs } from "./resources/jobs.mjs";
import { ModelListResponse, ModelUploadParams, ModelUploadResponse, Models } from "./resources/models.mjs";
import { Audio, AudioCreateParams, AudioCreateParamsNonStreaming, AudioCreateParamsStreaming, AudioFile, AudioSpeechStreamChunk } from "./resources/audio/audio.mjs";
import { Chat } from "./resources/chat/chat.mjs";
import { CodeInterpreter, CodeInterpreterExecuteParams, ExecuteResponse } from "./resources/code-interpreter/code-interpreter.mjs";
import { type Fetch } from "./internal/builtin-types.mjs";
import { HeadersLike, NullableHeaders } from "./internal/headers.mjs";
import { FinalRequestOptions, RequestOptions } from "./internal/request-options.mjs";
import { type LogLevel, type Logger } from "./internal/utils/log.mjs";
export interface ClientOptions {
    /**
     * Defaults to process.env['TOGETHER_API_KEY'].
     */
    apiKey?: string | undefined;
    /**
     * Override the default base URL for the API, e.g., "https://api.example.com/v2/"
     *
     * Defaults to process.env['TOGETHER_BASE_URL'].
     */
    baseURL?: string | null | undefined;
    /**
     * The maximum amount of time (in milliseconds) that the client should wait for a response
     * from the server before timing out a single request.
     *
     * Note that request timeouts are retried by default, so in a worst-case scenario you may wait
     * much longer than this timeout before the promise succeeds or fails.
     *
     * @unit milliseconds
     */
    timeout?: number | undefined;
    /**
     * Additional `RequestInit` options to be passed to `fetch` calls.
     * Properties will be overridden by per-request `fetchOptions`.
     */
    fetchOptions?: MergedRequestInit | undefined;
    /**
     * Specify a custom `fetch` function implementation.
     *
     * If not provided, we expect that `fetch` is defined globally.
     */
    fetch?: Fetch | undefined;
    /**
     * The maximum number of times that the client will retry a request in case of a
     * temporary failure, like a network error or a 5XX error from the server.
     *
     * @default 5
     */
    maxRetries?: number | undefined;
    /**
     * Default headers to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * header to `null` in request options.
     */
    defaultHeaders?: HeadersLike | undefined;
    /**
     * Default query parameters to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * param to `undefined` in request options.
     */
    defaultQuery?: Record<string, string | undefined> | undefined;
    /**
     * Set the log level.
     *
     * Defaults to process.env['TOGETHER_LOG'] or 'warn' if it isn't set.
     */
    logLevel?: LogLevel | undefined;
    /**
     * Set the logger.
     *
     * Defaults to globalThis.console.
     */
    logger?: Logger | undefined;
}
/**
 * API Client for interfacing with the Together API.
 */
export declare class Together {
    #private;
    apiKey: string;
    baseURL: string;
    maxRetries: number;
    timeout: number;
    logger: Logger | undefined;
    logLevel: LogLevel | undefined;
    fetchOptions: MergedRequestInit | undefined;
    private fetch;
    protected idempotencyHeader?: string;
    private _options;
    /**
     * API Client for interfacing with the Together API.
     *
     * @param {string | undefined} [opts.apiKey=process.env['TOGETHER_API_KEY'] ?? undefined]
     * @param {string} [opts.baseURL=process.env['TOGETHER_BASE_URL'] ?? https://api.together.xyz/v1] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {MergedRequestInit} [opts.fetchOptions] - Additional `RequestInit` options to be passed to `fetch` calls.
     * @param {Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=5] - The maximum number of times the client will retry a request.
     * @param {HeadersLike} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Record<string, string | undefined>} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL, apiKey, ...opts }?: ClientOptions);
    /**
     * Create a new client instance re-using the same options given to the current client with optional overriding.
     */
    withOptions(options: Partial<ClientOptions>): this;
    /**
     * Query a reranker model
     *
     * @example
     * ```ts
     * const response = await client.rerank({
     *   documents: [
     *     { title: 'bar', text: 'bar' },
     *     { title: 'bar', text: 'bar' },
     *     { title: 'bar', text: 'bar' },
     *     { title: 'bar', text: 'bar' },
     *   ],
     *   model: 'Salesforce/Llama-Rank-V1',
     *   query: 'What animals can I find near Peru?',
     * });
     * ```
     */
    rerank(body: TopLevelAPI.RerankParams, options?: RequestOptions): APIPromise<TopLevelAPI.RerankResponse>;
    protected defaultQuery(): Record<string, string | undefined> | undefined;
    protected validateHeaders({ values, nulls }: NullableHeaders): void;
    protected authHeaders(opts: FinalRequestOptions): Promise<NullableHeaders | undefined>;
    /**
     * Basic re-implementation of `qs.stringify` for primitive types.
     */
    protected stringifyQuery(query: Record<string, unknown>): string;
    private getUserAgent;
    protected defaultIdempotencyKey(): string;
    protected makeStatusError(status: number, error: Object, message: string | undefined, headers: Headers): Errors.APIError;
    buildURL(path: string, query: Record<string, unknown> | null | undefined, defaultBaseURL?: string | undefined): string;
    /**
     * Used as a callback for mutating the given `FinalRequestOptions` object.
     */
    protected prepareOptions(options: FinalRequestOptions): Promise<void>;
    /**
     * Used as a callback for mutating the given `RequestInit` object.
     *
     * This is useful for cases where you want to add certain headers based off of
     * the request properties, e.g. `method` or `url`.
     */
    protected prepareRequest(request: RequestInit, { url, options }: {
        url: string;
        options: FinalRequestOptions;
    }): Promise<void>;
    get<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    post<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    patch<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    put<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    delete<Rsp>(path: string, opts?: PromiseOrValue<RequestOptions>): APIPromise<Rsp>;
    private methodRequest;
    request<Rsp>(options: PromiseOrValue<FinalRequestOptions>, remainingRetries?: number | null): APIPromise<Rsp>;
    private makeRequest;
    fetchWithTimeout(url: RequestInfo, init: RequestInit | undefined, ms: number, controller: AbortController): Promise<Response>;
    private shouldRetry;
    private retryRequest;
    private calculateDefaultRetryTimeoutMillis;
    buildRequest(inputOptions: FinalRequestOptions, { retryCount }?: {
        retryCount?: number;
    }): Promise<{
        req: FinalizedRequestInit;
        url: string;
        timeout: number;
    }>;
    private buildHeaders;
    private buildBody;
    static Together: typeof Together;
    static DEFAULT_TIMEOUT: number;
    static TogetherError: typeof Errors.TogetherError;
    static APIError: typeof Errors.APIError;
    static APIConnectionError: typeof Errors.APIConnectionError;
    static APIConnectionTimeoutError: typeof Errors.APIConnectionTimeoutError;
    static APIUserAbortError: typeof Errors.APIUserAbortError;
    static NotFoundError: typeof Errors.NotFoundError;
    static ConflictError: typeof Errors.ConflictError;
    static RateLimitError: typeof Errors.RateLimitError;
    static BadRequestError: typeof Errors.BadRequestError;
    static AuthenticationError: typeof Errors.AuthenticationError;
    static InternalServerError: typeof Errors.InternalServerError;
    static PermissionDeniedError: typeof Errors.PermissionDeniedError;
    static UnprocessableEntityError: typeof Errors.UnprocessableEntityError;
    static toFile: typeof Uploads.toFile;
    chat: API.Chat;
    completions: API.Completions;
    embeddings: API.Embeddings;
    files: API.Files;
    fineTune: API.FineTuneResource;
    codeInterpreter: API.CodeInterpreter;
    images: API.Images;
    audio: API.Audio;
    models: API.Models;
    jobs: API.Jobs;
    endpoints: API.Endpoints;
    hardware: API.Hardware;
    batches: API.Batches;
}
export declare namespace Together {
    export type RequestOptions = Opts.RequestOptions;
    export { type RerankResponse as RerankResponse, type RerankParams as RerankParams };
    export { Chat as Chat };
    export { Completions as Completions, type Completion as Completion, type CompletionChunk as CompletionChunk, type LogProbs as LogProbs, type ToolChoice as ToolChoice, type Tools as Tools, type CompletionCreateParams as CompletionCreateParams, type CompletionCreateParamsNonStreaming as CompletionCreateParamsNonStreaming, type CompletionCreateParamsStreaming as CompletionCreateParamsStreaming, };
    export { Embeddings as Embeddings, type Embedding as Embedding, type EmbeddingCreateParams as EmbeddingCreateParams, };
    export { Files as Files, type FileObject as FileObject, type FilePurpose as FilePurpose, type FileType as FileType, type FileRetrieveResponse as FileRetrieveResponse, type FileListResponse as FileListResponse, type FileDeleteResponse as FileDeleteResponse, type FileUploadResponse as FileUploadResponse, type FileUploadParams as FileUploadParams, };
    export { FineTuneResource as FineTuneResource, type CosineLrSchedulerArgs as CosineLrSchedulerArgs, type FineTune as FineTune, type FineTuneEvent as FineTuneEvent, type FullTrainingType as FullTrainingType, type LinearLrSchedulerArgs as LinearLrSchedulerArgs, type LoRaTrainingType as LoRaTrainingType, type LrScheduler as LrScheduler, type TrainingMethodDpo as TrainingMethodDpo, type TrainingMethodSft as TrainingMethodSft, type FineTuneCreateResponse as FineTuneCreateResponse, type FineTuneListResponse as FineTuneListResponse, type FineTuneCancelResponse as FineTuneCancelResponse, type FineTuneDownloadResponse as FineTuneDownloadResponse, type FineTuneListEventsResponse as FineTuneListEventsResponse, type FineTuneRetrieveCheckpointsResponse as FineTuneRetrieveCheckpointsResponse, type FineTuneCreateParams as FineTuneCreateParams, type FineTuneDownloadParams as FineTuneDownloadParams, };
    export { CodeInterpreter as CodeInterpreter, type ExecuteResponse as ExecuteResponse, type CodeInterpreterExecuteParams as CodeInterpreterExecuteParams, };
    export { Images as Images, type ImageDataB64 as ImageDataB64, type ImageDataURL as ImageDataURL, type ImageFile as ImageFile, type ImageCreateParams as ImageCreateParams, };
    export { Audio as Audio, type AudioFile as AudioFile, type AudioSpeechStreamChunk as AudioSpeechStreamChunk, type AudioCreateParams as AudioCreateParams, type AudioCreateParamsNonStreaming as AudioCreateParamsNonStreaming, type AudioCreateParamsStreaming as AudioCreateParamsStreaming, };
    export { Models as Models, type ModelListResponse as ModelListResponse, type ModelUploadResponse as ModelUploadResponse, type ModelUploadParams as ModelUploadParams, };
    export { Jobs as Jobs, type JobRetrieveResponse as JobRetrieveResponse, type JobListResponse as JobListResponse, };
    export { Endpoints as Endpoints, type Autoscaling as Autoscaling, type EndpointCreateResponse as EndpointCreateResponse, type EndpointRetrieveResponse as EndpointRetrieveResponse, type EndpointUpdateResponse as EndpointUpdateResponse, type EndpointListResponse as EndpointListResponse, type EndpointCreateParams as EndpointCreateParams, type EndpointUpdateParams as EndpointUpdateParams, type EndpointListParams as EndpointListParams, };
    export { Hardware as Hardware, type HardwareListResponse as HardwareListResponse, type HardwareListParams as HardwareListParams, };
    export { Batches as Batches, type BatchCreateResponse as BatchCreateResponse, type BatchRetrieveResponse as BatchRetrieveResponse, type BatchListResponse as BatchListResponse, type BatchCreateParams as BatchCreateParams, };
}
//# sourceMappingURL=client.d.mts.map